///
/// Listener.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/JSIHelpers.hpp>)
#include <NitroModules/JSIHelpers.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif



#include <functional>

namespace margelo::nitro::mmkv {

  /**
   * A struct which can be represented as a JavaScript object (Listener).
   */
  struct Listener {
  public:
    std::function<void()> remove     SWIFT_PRIVATE;

  public:
    Listener() = default;
    explicit Listener(std::function<void()> remove): remove(remove) {}
  };

} // namespace margelo::nitro::mmkv

namespace margelo::nitro {

  // C++ Listener <> JS Listener (object)
  template <>
  struct JSIConverter<margelo::nitro::mmkv::Listener> final {
    static inline margelo::nitro::mmkv::Listener fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return margelo::nitro::mmkv::Listener(
        JSIConverter<std::function<void()>>::fromJSI(runtime, obj.getProperty(runtime, "remove"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const margelo::nitro::mmkv::Listener& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "remove", JSIConverter<std::function<void()>>::toJSI(runtime, arg.remove));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!nitro::isPlainObject(runtime, obj)) {
        return false;
      }
      if (!JSIConverter<std::function<void()>>::canConvert(runtime, obj.getProperty(runtime, "remove"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
